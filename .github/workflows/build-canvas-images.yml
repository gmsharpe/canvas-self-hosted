name: Build & Push Canvas image to GHCR

# Trigger on push to main/master and manually from the UI
on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      canvas_lms_ref:
        description: 'Ref (branch/tag/commit) for instrcture/canvas-lms'
        required: true
        default: 'd5a99e9294e374e83f41197adce94aedf394750f'
      build_mode:
        description: 'dockerfile (default) or compose'
        required: true
        default: 'dockerfile'
      image_tag:
        description: 'Image tag to use (defaults to run SHA)'
        required: false
        default: ''
      run_smoke:
        description: 'Run a quick smoke test after build (true/false)'
        required: true
        default: 'true'

# Important: grant packages write permission so GITHUB_TOKEN can push to GHCR
permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: canvas-lms

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout this repo (canvas-self-hosted)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout instrcture/canvas-lms at chosen ref
        uses: actions/checkout@v4
        with:
          repository: 'instructure/canvas-lms'
          ref: ${{ github.event.inputs.canvas_lms_ref }}
          path: 'canvas-lms'
          fetch-depth: 1

      - name: Setup QEMU (multi-arch)
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine image tag
        id: tag
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ] && [ "${{ github.event.inputs.image_tag }}" != "" ]; then
            echo "tag=${{ github.event.inputs.image_tag }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${{ github.sha }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Log in to GitHub Container Registry (GHCR) using GITHUB_TOKEN
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare cache dir
        run: mkdir -p ~/.cache/docker-buildx

      - name: Build & push (Dockerfile)
        if: ${{ github.event.inputs.build_mode == 'dockerfile' }}
        uses: docker/build-push-action@v5
        with:
          context: ./canvas-lms
          # adjust to whatever Dockerfile path you actually need
          file: ./canvas-lms/Dockerfile-production
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
            ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            RAILS_ENV=production

      - name: Build (docker compose)
        if: ${{ github.event.inputs.build_mode == 'compose' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y docker-compose-plugin
          # build all services declared in docker-compose.yml (adjust path if needed)
          docker compose -f docker-compose.yml build --parallel
          # After building with compose, you can tag & push service images explicitly if needed.
          # E.g. docker tag <local-image> ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
          #       docker push ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}

      - name: Optional smoke test
        if: ${{ github.event.inputs.run_smoke == 'true' }}
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
          echo "Running smoke check for $IMAGE"
          # Quick check: print entrypoint (no containers started long-term)
          docker run --rm --entrypoint echo $IMAGE "image-built"

      - name: Output pushed image tags
        run: |
          echo "Pushed:"
          echo "  ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}"
          echo "  ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
